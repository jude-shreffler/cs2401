#include <iostream>

using namespace std;

template<class T>
dlist<T>::dlist() {
    head = NULL;
    tail = NULL;
}

template<class T>
dlist<T>::~dlist() {
    dNode<T>* deleter;
    dNode<T>* cursor = head;

    while (cursor != NULL) {
        deleter = cursor;
        cursor = cursor->next();
        delete deleter;
    }
}

template<class T>
dlist<T>::dlist(dlist<T>& d) {
    dNode<T>* cursord = d.head;

    if(cursord == NULL) {
        head = NULL;
        tail = NULL;
        return;
    }

    head = new dNode<T>(cursord->data(), NULL, NULL);
    dNode<T>* cursor = head;

    while (cursord->next() != NULL) {
        cursord = cursord->next();
        cursor->setNext(new dNode<T>(cursord->data(), cursor, NULL));
        cursor = cursor->next();
    }

    tail = cursor;
}

template<class T>
dlist<T> dlist<T>::operator = (dlist<T>& d) {
    /// deletion code
    dNode<T>* cursor = head;
    dNode<T>* deleter = head;

    while (cursor != NULL) {
        cursor = cursor->next();
        delete deleter;
        deleter = cursor;
    }

    /// copy code
    dNode<T>* cursord = d.head;

    if(cursord == NULL) {
        head = NULL;
        tail = NULL;
        return *this;
    }

    head = new dNode<T>(cursord->data(), NULL, NULL);
    cursor = head;

    while (cursord->next() != NULL) {
        cursord = cursord->next();
        cursor->setNext(new dNode<T>(cursord->data(), cursor, NULL));
        cursor = cursor->next();
    }

    tail = cursor;

    return *this;
}

template<class T>
void dlist<T>::front_insert(const T d) {
    if (head == NULL) {
        dNode<T>* temp = new dNode<T>(d);
        head = temp;
        tail = temp;
    } else {
        head->setPrevious(new dNode<T>(d, NULL, head));
        head = head->previous();
    }
}

template<class T>
void dlist<T>::rear_insert(const T d) {
    if (tail == NULL) {
        dNode<T>* temp = new dNode<T>(d);
        head = temp;
        tail = temp;
    } else {
        tail->setNext(new dNode<T>(d, tail, NULL));
        tail = tail -> next();
    }
}

template<class T>
void dlist<T>::insert_before(const dlist<T>::iterator it, const T d) {
    if (!it.current) { /// empty list
        cout << "Your list is empty, and therefore cannot have an element added" << endl;
        return;
    } else if (head == tail || it.current == head) {
        it.current->setPrevious(new dNode<T>(d, NULL, head));
        head = head->previous();
        return;
    } else {
        dNode<T>* before = it.current->previous();
        dNode<T>* temp = new dNode<T>(d, before, it.current);

        before->setNext(temp);
        it.current->setPrevious(temp);
        return;
    }
}

template<class T>
void dlist<T>::insert_after(const dlist<T>::iterator it, const T d) {
    if (!it.current) {
        cout << "Your list is empty, and therefore cannot have an element added" << endl;
        return;
    } else if (tail == head || it.current == tail) {
        it.current->setNext(new dNode<T>(d, tail, NULL));
        tail = tail->next();
        return;
    } else {
        dNode<T>* after = it.current->next();
        dNode<T>* temp = new dNode<T>(d, it.current, after);

        it.current->setNext(temp);
        after->setPrevious(temp);
        return;
    }
}

template<class T>
void dlist<T>::front_remove() {
    head = head->next();
    head->setPrevious(NULL);
}

template<class T>
void dlist<T>::rear_remove() {
    tail = tail->previous();
    tail->setNext(NULL);
}

template<class T>
void dlist<T>::reverse_show() {
    dNode<T>* cursor = tail;
    while (cursor != NULL) {
        cout << cursor -> data() << endl;
        cursor = cursor->previous();
    }
}

template<class T>
void dlist<T>::show() {
    dNode<T>* cursor = head;
    while (cursor != NULL) {
        cout << cursor->data() << endl;
        cursor = cursor->next();
    }
}

template <class T>
int dlist<T>::size() {
    dNode<T>* cursor = head;
    int i = 0;
    while (cursor != NULL) {
        ++i;
        cursor = cursor->next();
    }

    return i;
}