template<class T>
diterator<T>& diterator<T>::operator ++ () { /// Prefix ++
    current = current->next();
    return *this;
}

template<class T>
diterator<T>& diterator<T>::operator ++ (int) { // Postfix ++
    diterator<T> original(current);
    current = current->next();
    return original;
}

template<class T>
diterator<T>& diterator<T>::operator -- () { /// Prefix --
    current = current->previous();
    return *this;
}

template<class T>
diterator<T>& diterator<T>::operator -- (int) { // Postfix --
    diterator<T> original(current);
    current = current->previous();
    return original;
}